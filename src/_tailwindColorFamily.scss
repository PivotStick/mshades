@use "closestColor";
@use "utils";
@use "sass:color";
@use "sass:map";
@use "sass:math";
@use "sass:list";

@function generate($hexcode, $referenceColors) {
	$closestColorFamily: closestColor.find($hexcode, $referenceColors);

	$inputHue: color.hue($hexcode);
	$matchHue: color.hue(map.get(map.get($closestColorFamily, "closestShadeLightness"), "hexcode"));

	$hueDifference: $inputHue - $matchHue;

	$saturationRatio: math.div(
		color.saturation($hexcode),
		color.saturation(map.get(map.get($closestColorFamily, "closestShadeLightness"), "hexcode"))
	);

	$shades: ();

	@each $color in map.get($closestColorFamily, "shades") {
		$newColor: map.get($color, "hexcode");

		$newSaturation: (color.saturation($newColor) * if($saturationRatio == 0, 1, $saturationRatio))
			%
			100;

		$newColor: color.change($newColor, $saturation: $newSaturation);
		$newColor: color.adjust($newColor, $hue: $hueDifference);

		$newColor: utils.rgb2hsl($newColor);

		@if (
			map.get(map.get($closestColorFamily, "closestShadeLightness"), "number") ==
				map.get($color, "number")
		) {
			$newColor: $hexcode;
		}

		$shades: map.set($shades, map.get($color, "number"), $newColor);
	}

	@return $shades;
}
